with "config/erlang_nifs_config.gpr";
project Erlang_Nifs is

   for Languages use ("ada", "C++");

   for Library_Name use "Erlang_Nifs";
   for Library_Version use Project'Library_Name & ".so." & Erlang_Nifs_Config.Crate_Version;

   for Library_Interface use ("my_nifs");
   for Library_Auto_Init use "true";
   for Library_Dir use "lib";

   for Source_Dirs use ("src/", "config/");
   for Object_Dir use "obj/" & Erlang_Nifs_Config.Build_Profile;
   for Create_Missing_Dirs use "True";

   -- for Main use ("nif_bootstrap.cpp");


-- -bundle -bundle_loader $ERL_ROOT/erts-12.3/bin/beam.smp
-- alr exec -- gcc -fPIC -o lib/niftest.so src/nif_bootstrap.c -I /usr/local/Cellar/erlang/26.0.2/lib/erlang/erts-14.0.2/include -bundle -bundle_loader /usr/local/Cellar/erlang/26.0.2/lib/erlang/erts-14.0.2/bin/beam.smp
   

   type Library_Type_Type is ("relocatable", "static", "static-pic");
   Library_Type : Library_Type_Type :=
     external ("ERLANG_NIFS_LIBRARY_TYPE", external ("LIBRARY_TYPE", "static-pic"));
   for Library_Kind use Library_Type;

   package Compiler is
      for Default_Switches ("Ada") use Erlang_Nifs_Config.Ada_Compiler_Switches & ("-gnata");
      for Default_Switches ("C++") use ("-I/usr/local/lib/erlang/usr/include");
   end Compiler;

   -- for Library_Builder use "gcc -bundle";
   for Archive_Builder use ("true"); -- no-op
   for Archive_Indexer use ("true"); -- no-op

   Runtime_Dir := External ("null", " $(dirname `gcc --print-libgcc`)");
   Foo_Tme := External ("null", "export RDIR=/usr/local/shar");
   -- Runtime_Dir := External ("dirname", "");

   -- Runtime_Dir := External ("echo", "$(dirname `gcc --print-libgcc`)");

   -- Runtime_Dir1 := External ("eval", Lib_Gcc);
   -- Runtime_Dir2 := External ("dirname", Lib_Gcc);
   -- Runtime_Dir := External ("eval", Runtime_Dir2);
   -- Runtime_Lib1 := External ("eval", Runtime_Dir);
   -- Runtime_Lib2 := External ("echo", "/adalib/libgnat_pic.a");
   -- Runtime_Lib := Runtime_Dir & "/adalib/libgnat_pic.a";

   -- case Runtime_Dir is
   --    when others =>
   --       Runtime_Lib := Runtime_Dir & "/adalib/libgnat_pic.a";
   -- end case;

   Erlang_Cmd := "-noshell -eval 'io:fwrite(code:lib_dir(erts))' -eval 'init:stop()'";
   Erlang_Rts_Dir := External ("erl", Erlang_Cmd);
   Erlang_Lib_Bundle := "/usr/local/lib/erlang/erts-14.0.2/bin/beam.smp"; --  code:lib_dir(erts)/bin/beam.smp

   -- Erlang_Lib_Bundle := "/usr/local/lib/erlang/erts-14.0.2/bin/beam.smp"; --  code:lib_dir(erts)/bin/beam.smp

   for Library_Partial_Linker use ("bash"); -- no-op

   case Library_Type is
      when others =>
         -- for Library_Options use ("-bundle", "-bundle_loader /usr/local/Cellar/erlang/26.0.2/lib/erlang/erts-14.0.2/bin/beam.smp", "-o niftest.so");
         for Library_Options use ("echo", "-lc",
                                  "-lstdc++",
                                  "-L", Runtime_Dir,
                                  Runtime_Dir & "/adalib/libgnat_pic.a",
                                  "-bundle",
                                  "-bundle_loader", Erlang_Lib_Bundle,
                                  "-oniftest.so");
      -- when "static" =>
      --    null;
   end case;

   -- case Library_Type is
   --    when others =>
   --       -- for Library_Options use ("-bundle", "-bundle_loader /usr/local/Cellar/erlang/26.0.2/lib/erlang/erts-14.0.2/bin/beam.smp", "-o niftest.so");
   --       for Library_Options use ("-lgnat");
   --    -- when "static" =>
   --    --    null;
   -- end case;


   -- package Linker is
   --    for Default_Switches ("Ada") use Linker'Default_Switches ("Ada"); -- & ("-bundle", "-bundle_loader /usr/local/Cellar/erlang/26.0.2/lib/erlang/erts-14.0.2/bin/beam.smp", "-olib/niftest.so");
   -- end Linker;

   -- package Linker is
   --    for Default_Switches ("Ada") use ("-bundle", "-bundle_loader /usr/local/lib/erlang/erts-14.0.2/bin/beam.smp");
   -- end Linker;

   package Binder is
      for Switches ("Ada") use ("-Es"); --  Symbolic traceback
   end Binder;

   package Install is
      for Artifacts (".") use ("share");
   end Install;

end Erlang_Nifs;

-- project Nif_Bootstrap is

--    for Languages use ("c");
--    for Main use ("erlang_bootstrap.c");
--    for Exec_Dir use ".";
--    for Source_Dirs use (".");
--    for Object_Dir use "obj";
--    for Create_Missing_Dirs use "true";

-- end Main;