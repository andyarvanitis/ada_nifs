pragma Ada_2012;

pragma Style_Checks (Off);
pragma Warnings (Off, "-gnatwu");

with Interfaces.C; use Interfaces.C;
with erl_drv_nif_h;
with Interfaces.C.Strings;
with System;
with sys_utypes_usize_t_h;

package erl_nif_h is

   ERL_NIF_MAJOR_VERSION : constant := 2;  --  /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:63
   ERL_NIF_MINOR_VERSION : constant := 17;  --  /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:64

   ERL_NIF_MIN_ERTS_VERSION : aliased constant String := "erts-14.0" & ASCII.NUL;  --  /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:75

   ERL_NIF_MIN_REQUIRED_MAJOR_VERSION_ON_LOAD : constant := 2;  --  /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:87

   ERL_NIF_VM_VARIANT : aliased constant String := "beam.vanilla" & ASCII.NUL;  --  /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:102
   --  unsupported macro: ERL_NIF_TIME_ERROR ((ErlNifSInt64) ERTS_NAPI_TIME_ERROR__)

   ERL_NIF_SELECT_STOP_CALLED : constant := (2 ** 0);  --  /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:174
   ERL_NIF_SELECT_STOP_SCHEDULED : constant := (2 ** 1);  --  /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:175
   ERL_NIF_SELECT_INVALID_EVENT : constant := (2 ** 2);  --  /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:176
   ERL_NIF_SELECT_FAILED : constant := (2 ** 3);  --  /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:177
   ERL_NIF_SELECT_READ_CANCELLED : constant := (2 ** 4);  --  /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:178
   ERL_NIF_SELECT_WRITE_CANCELLED : constant := (2 ** 5);  --  /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:179
   ERL_NIF_SELECT_ERROR_CANCELLED : constant := (2 ** 6);  --  /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:180
   ERL_NIF_SELECT_NOTSUP : constant := (2 ** 7);  --  /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:181

   ERL_NIF_IOVEC_SIZE : constant := 16;  --  /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:280

   ERL_NIF_THR_UNDEFINED : constant := 0;  --  /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:328
   ERL_NIF_THR_NORMAL_SCHEDULER : constant := 1;  --  /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:329
   ERL_NIF_THR_DIRTY_CPU_SCHEDULER : constant := 2;  --  /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:330
   ERL_NIF_THR_DIRTY_IO_SCHEDULER : constant := 3;  --  /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:331
   --  unsupported macro: ERL_NIF_INIT_ARGS void
   --  unsupported macro: ERL_NIF_INIT_EXPORT __attribute__ ((visibility("default")))
   --  arg-macro: procedure ERL_NIF_INIT_DECL (MODNAME)
   --    ERL_NIF_INIT_EXPORT ErlNifEntry* nif_init(ERL_NIF_INIT_ARGS)
   --  unsupported macro: ERL_NIF_INIT(NAME,FUNCS,LOAD,RELOAD,UPGRADE,UNLOAD) ERL_NIF_INIT_PROLOGUE ERL_NIF_INIT_GLOB ERL_NIF_INIT_DECL(NAME); ERL_NIF_INIT_DECL(NAME) { static ErlNifEntry entry = { ERL_NIF_MAJOR_VERSION, ERL_NIF_MINOR_VERSION, #NAME, sizeof(FUNCS) / sizeof(*FUNCS), FUNCS, LOAD, RELOAD, UPGRADE, UNLOAD, ERL_NIF_VM_VARIANT, 1, sizeof(ErlNifResourceTypeInit), ERL_NIF_MIN_ERTS_VERSION }; ERL_NIF_INIT_BODY; return &entry; } ERL_NIF_INIT_EPILOGUE

  -- * %CopyrightBegin%
  -- *
  -- * Copyright Ericsson AB 2009-2023. All Rights Reserved.
  -- *
  -- * Licensed under the Apache License, Version 2.0 (the "License");
  -- * you may not use this file except in compliance with the License.
  -- * You may obtain a copy of the License at
  -- *
  -- *     http://www.apache.org/licenses/LICENSE-2.0
  -- *
  -- * Unless required by applicable law or agreed to in writing, software
  -- * distributed under the License is distributed on an "AS IS" BASIS,
  -- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  -- * See the License for the specific language governing permissions and
  -- * limitations under the License.
  -- *
  -- * %CopyrightEnd%
  --  

  -- Include file for writers of Native Implemented Functions. 
  -- 

  -- Version history:
  --** 0.1: R13B03
  --** 1.0: R13B04
  --** 2.0: R14A
  --** 2.1: R14B02 "vm_variant"
  --** 2.2: R14B03 enif_is_exception
  --** 2.3: R15 enif_make_reverse_list, enif_is_number
  --** 2.4: R16 enif_consume_timeslice
  --** 2.5: First experimental maps API additions (libs of this version is not compatible with any other VM)
  --** 2.5: R17 Maps API additions
  --** 2.6: R17 with maps
  --**      R17 dirty schedulers
  --** 2.7: 17.3 add enif_schedule_nif
  --**           remove enif_schedule_dirty_nif, enif_schedule_dirty_nif_finalizer, enif_dirty_nif_finalizer
  --**           add ErlNifEntry options
  --**           add ErlNifFunc flags
  --** 2.8: 18.0 add enif_has_pending_exception
  --** 2.9: 18.2 enif_getenv
  --** 2.10: Time API
  --** 2.11: 19.0 enif_snprintf 
  --** 2.12: 20.0 add enif_select, enif_open_resource_type_x
  --** 2.13: 20.1 add enif_ioq
  --** 2.14: 21.0 add enif_ioq_peek_head, enif_(mutex|cond|rwlock|thread)_name
  --**                enif_vfprintf, enif_vsnprintf, enif_make_map_from_arrays
  --** 2.15: 22.0 ERL_NIF_SELECT_CANCEL, enif_select_(read|write)
  --**            enif_term_type
  --** 2.16: 24.0 enif_init_resource_type, enif_dynamic_resource_call
  --** 2.17: 26.0 enif_set_option, enif_get_string_length, enif_make_new_atom,
  --**            enif_make_new_atom_len, ERL_NIF_UTF8
  -- 

  -- * WHEN CHANGING INTERFACE VERSION, also replace erts version below with
  -- * a ticket number e.g. "erts-@OTP-12345@". The syntax is the same as for
  -- * runtime dependencies so multiple tickets should be separated with ":", e.g.
  -- * "erts-@OTP-12345:OTP-54321@".
  -- *
  -- * If you're not on the OTP team, you should use a placeholder like
  -- * erts-@MyName@ instead.
  --  

  -- * The emulator will refuse to load a nif-lib with a major version
  -- * lower than ERL_NIF_MIN_REQUIRED_MAJOR_VERSION_ON_LOAD. The load
  -- * may however fail if user have not removed use of deprecated
  -- * symbols.
  -- *
  -- * The ERL_NIF_MIN_REQUIRED_MAJOR_VERSION_ON_LOAD have to allow
  -- * loading of nif-libs built at least two major OTP releases
  -- * ago.
  --  

   subtype ErlNifUInt64 is erl_drv_nif_h.ErlNapiUInt64;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:97

   subtype ErlNifSInt64 is erl_drv_nif_h.ErlNapiSInt64;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:98

   subtype ErlNifUInt is erl_drv_nif_h.ErlNapiUInt;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:99

   subtype ErlNifSInt is erl_drv_nif_h.ErlNapiSInt;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:100

   subtype ERL_NIF_TERM is ErlNifUInt;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:103

   subtype ERL_NIF_UINT is ERL_NIF_TERM;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:105

   subtype ErlNifTime is ErlNifSInt64;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:107

   type ErlNifTimeUnit is 
     (ERL_NIF_SEC,
      ERL_NIF_MSEC,
      ERL_NIF_USEC,
      ERL_NIF_NSEC)
   with Convention => C;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:116

   type enif_environment_t is null record;   -- incomplete struct

   subtype ErlNifEnv is enif_environment_t;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:119

   type enif_func_t is record
      name : Interfaces.C.Strings.chars_ptr;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:123
      arity : aliased unsigned;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:124
      fptr : access function
           (arg1 : access ErlNifEnv;
            arg2 : int;
            arg3 : access ERL_NIF_TERM) return ERL_NIF_TERM;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:125
      flags : aliased unsigned;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:126
   end record
   with Convention => C_Pass_By_Copy;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:121

   subtype ErlNifFunc is enif_func_t;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:127

   type enif_entry_t is record
      major : aliased int;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:132
      minor : aliased int;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:133
      name : Interfaces.C.Strings.chars_ptr;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:134
      num_of_funcs : aliased int;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:135
      funcs : access ErlNifFunc;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:136
      load : access function
           (arg1 : access ErlNifEnv;
            arg2 : System.Address;
            arg3 : ERL_NIF_TERM) return int;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:137
      reload : access function
           (arg1 : access ErlNifEnv;
            arg2 : System.Address;
            arg3 : ERL_NIF_TERM) return int;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:138
      upgrade : access function
           (arg1 : access ErlNifEnv;
            arg2 : System.Address;
            arg3 : System.Address;
            arg4 : ERL_NIF_TERM) return int;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:139
      unload : access procedure (arg1 : access ErlNifEnv; arg2 : System.Address);  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:140
      vm_variant : Interfaces.C.Strings.chars_ptr;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:143
      options : aliased unsigned;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:146
      sizeof_ErlNifResourceTypeInit : aliased sys_utypes_usize_t_h.size_t;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:149
      min_erts : Interfaces.C.Strings.chars_ptr;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:152
   end record
   with Convention => C_Pass_By_Copy;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:130

  -- Added in 2.1  
  -- Added in 2.7  
  -- Unused. Can be set to 0 or 1 (dirty sched config)  
  -- Added in 2.12  
  -- Added in 2.14  
   subtype ErlNifEntry is enif_entry_t;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:153

  -- Internals (avert your eyes)  
  -- for future additions to be ABI compatible (same struct size)  
   type anon_array1567 is array (0 .. 1) of System.Address;
   type ErlNifBinary is record
      size : aliased sys_utypes_usize_t_h.size_t;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:158
      data : access unsigned_char;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:159
      ref_bin : System.Address;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:162
      uu_spare_u_u : anon_array1567;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:164
   end record
   with Convention => C_Pass_By_Copy;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:165

  -- FIXME: Use 'HANDLE' somehow without breaking existing source  
   subtype ErlNifEvent is int;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:170

  -- Return bits from enif_select:  
   subtype ErlNifResourceFlags is unsigned;
   ErlNifResourceFlags_ERL_NIF_RT_CREATE : constant ErlNifResourceFlags := 1;
   ErlNifResourceFlags_ERL_NIF_RT_TAKEOVER : constant ErlNifResourceFlags := 2;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:187

   subtype ErlNifCharEncoding is unsigned;
   ErlNifCharEncoding_ERL_NIF_LATIN1 : constant ErlNifCharEncoding := 1;
   ErlNifCharEncoding_ERL_NIF_UTF8 : constant ErlNifCharEncoding := 2;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:193

  -- internal, may change  
   type ErlNifPid is record
      pid : aliased ERL_NIF_TERM;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:197
   end record
   with Convention => C_Pass_By_Copy;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:198

  -- internal, may change  
   type ErlNifPort is record
      port_id : aliased ERL_NIF_TERM;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:202
   end record
   with Convention => C_Pass_By_Copy;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:203

   subtype ErlNifMonitor is erl_drv_nif_h.ErlDrvMonitor;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:205

   --  skipped function type ErlNifOnHaltCallback

   type enif_resource_type_t is null record;   -- incomplete struct

   subtype ErlNifResourceType is enif_resource_type_t;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:209

   --  skipped function type ErlNifResourceDtor

   --  skipped function type ErlNifResourceStop

   --  skipped function type ErlNifResourceDown

   --  skipped function type ErlNifResourceDynCall

  -- at ERL_NIF_SELECT_STOP event  
  -- enif_monitor_process  
   type ErlNifResourceTypeInit is record
      dtor : access procedure (arg1 : access ErlNifEnv; arg2 : System.Address);  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:216
      stop : access procedure
           (arg1 : access ErlNifEnv;
            arg2 : System.Address;
            arg3 : ErlNifEvent;
            arg4 : int);  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:217
      down : access procedure
           (arg1 : access ErlNifEnv;
            arg2 : System.Address;
            arg3 : access ErlNifPid;
            arg4 : access ErlNifMonitor);  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:218
      members : aliased int;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:219
      dyncall : access procedure
           (arg1 : access ErlNifEnv;
            arg2 : System.Address;
            arg3 : System.Address);  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:220
   end record
   with Convention => C_Pass_By_Copy;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:221

   subtype ErlNifSysInfo is erl_drv_nif_h.ErlDrvSysInfo;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:223

   type ErlDrvTid_u is null record;   -- incomplete struct

   type ErlNifTid is access all ErlDrvTid_u;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:225

   type ErlDrvMutex_u is null record;   -- incomplete struct

   subtype ErlNifMutex is ErlDrvMutex_u;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:226

   type ErlDrvCond_u is null record;   -- incomplete struct

   subtype ErlNifCond is ErlDrvCond_u;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:227

   type ErlDrvRWLock_u is null record;   -- incomplete struct

   subtype ErlNifRWLock is ErlDrvRWLock_u;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:228

   subtype ErlNifTSDKey is int;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:229

   subtype ErlNifThreadOpts is erl_drv_nif_h.ErlDrvThreadOpts;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:231

   subtype ErlNifDirtyTaskFlags is unsigned;
   ErlNifDirtyTaskFlags_ERL_NIF_DIRTY_JOB_CPU_BOUND : constant ErlNifDirtyTaskFlags := 1;
   ErlNifDirtyTaskFlags_ERL_NIF_DIRTY_JOB_IO_BOUND : constant ErlNifDirtyTaskFlags := 2;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:237

  -- All fields all internal and may change  
   type ErtsDynamicWStack_u is null record;   -- incomplete struct

  -- for future additions to be ABI compatible (same struct size)  
   type anon_struct1621 is record
      ks : access ERL_NIF_TERM;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:246
      vs : access ERL_NIF_TERM;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:247
   end record
   with Convention => C_Pass_By_Copy;
   type anon_struct1623 is record
      wstack : access ErtsDynamicWStack_u;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:250
      kv : access ERL_NIF_TERM;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:251
   end record
   with Convention => C_Pass_By_Copy;
   type anon_union1620 (discr : unsigned := 0) is record
      case discr is
         when 0 =>
            flat : aliased anon_struct1621;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:248
         when others =>
            hash : aliased anon_struct1623;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:252
      end case;
   end record
   with Convention => C_Pass_By_Copy,
        Unchecked_Union => True;
   type ErlNifMapIterator is record
      map : aliased ERL_NIF_TERM;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:241
      size : aliased ERL_NIF_UINT;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:242
      idx : aliased ERL_NIF_UINT;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:243
      u : aliased anon_union1620;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:253
      uu_spare_u_u : anon_array1567;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:254
   end record
   with Convention => C_Pass_By_Copy;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:255

  -- deprecated synonyms (undocumented in 17 and 18-rc)  
   subtype ErlNifMapIteratorEntry is unsigned;
   ErlNifMapIteratorEntry_ERL_NIF_MAP_ITERATOR_FIRST : constant ErlNifMapIteratorEntry := 1;
   ErlNifMapIteratorEntry_ERL_NIF_MAP_ITERATOR_LAST : constant ErlNifMapIteratorEntry := 2;
   ErlNifMapIteratorEntry_ERL_NIF_MAP_ITERATOR_HEAD : constant ErlNifMapIteratorEntry := 1;
   ErlNifMapIteratorEntry_ERL_NIF_MAP_ITERATOR_TAIL : constant ErlNifMapIteratorEntry := 2;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:264

   subtype ErlNifUniqueInteger is unsigned;
   ErlNifUniqueInteger_ERL_NIF_UNIQUE_POSITIVE : constant ErlNifUniqueInteger := 1;
   ErlNifUniqueInteger_ERL_NIF_UNIQUE_MONOTONIC : constant ErlNifUniqueInteger := 2;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:269

   subtype ErlNifBinaryToTerm is unsigned;
   ErlNifBinaryToTerm_ERL_NIF_BIN2TERM_SAFE : constant ErlNifBinaryToTerm := 536870912;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:273

   subtype ErlNifHash is unsigned;
   ErlNifHash_ERL_NIF_INTERNAL_HASH : constant ErlNifHash := 1;
   ErlNifHash_ERL_NIF_PHASH2 : constant ErlNifHash := 2;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:278

  -- length of vectors  
   type anon_array1638 is array (0 .. 15) of aliased erl_drv_nif_h.SysIOVec;
   type anon_array1640 is array (0 .. 15) of System.Address;
   type erl_nif_io_vec is record
      iovcnt : aliased int;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:283
      size : aliased sys_utypes_usize_t_h.size_t;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:284
      iov : access erl_drv_nif_h.SysIOVec;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:285
      ref_bins : System.Address;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:288
      flags : aliased int;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:289
      small_iov : aliased anon_array1638;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:292
      small_ref_bin : anon_array1640;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:293
   end record
   with Convention => C_Pass_By_Copy;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:282

  -- total size in bytes  
  -- internals (avert your eyes)  
  -- Binary[]  
  -- Used when stack allocating the io vec  
   subtype ErlNifIOVec is erl_nif_io_vec;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:294

   type erts_io_queue is null record;   -- incomplete struct

   subtype ErlNifIOQueue is erts_io_queue;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:296

   subtype ErlNifIOQueueOpts is unsigned;
   ErlNifIOQueueOpts_ERL_NIF_IOQ_NORMAL : constant ErlNifIOQueueOpts := 1;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:300

  -- This is a dummy value intended to coax the compiler into warning about
  --     * unhandled values in a switch even if all the above values have been
  --     * handled. We can add new entries at any time so the user must always
  --     * have a default case.  

   subtype ErlNifTermType is int;
   ErlNifTermType_ERL_NIF_TERM_TYPE_ATOM : constant ErlNifTermType := 1;
   ErlNifTermType_ERL_NIF_TERM_TYPE_BITSTRING : constant ErlNifTermType := 2;
   ErlNifTermType_ERL_NIF_TERM_TYPE_FLOAT : constant ErlNifTermType := 3;
   ErlNifTermType_ERL_NIF_TERM_TYPE_FUN : constant ErlNifTermType := 4;
   ErlNifTermType_ERL_NIF_TERM_TYPE_INTEGER : constant ErlNifTermType := 5;
   ErlNifTermType_ERL_NIF_TERM_TYPE_LIST : constant ErlNifTermType := 6;
   ErlNifTermType_ERL_NIF_TERM_TYPE_MAP : constant ErlNifTermType := 7;
   ErlNifTermType_ERL_NIF_TERM_TYPE_PID : constant ErlNifTermType := 8;
   ErlNifTermType_ERL_NIF_TERM_TYPE_PORT : constant ErlNifTermType := 9;
   ErlNifTermType_ERL_NIF_TERM_TYPE_REFERENCE : constant ErlNifTermType := 10;
   ErlNifTermType_ERL_NIF_TERM_TYPE_TUPLE : constant ErlNifTermType := 11;
   ErlNifTermType_ERL_NIF_TERM_TYPE_u_MISSING_DEFAULT_CASE_u_READ_THE_MANUAL : constant ErlNifTermType := -1;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:320

  -- * Return values from enif_thread_type(). Negative values
  -- * reserved for specific types of non-scheduler threads.
  -- * Positive values reserved for scheduler thread types.
  --  

   subtype ErlNifOption is unsigned;
   ErlNifOption_ERL_NIF_OPT_DELAY_HALT : constant ErlNifOption := 1;
   ErlNifOption_ERL_NIF_OPT_ON_HALT : constant ErlNifOption := 2;  -- /usr/local/Cellar/erlang/26.0.2/lib/erlang/usr/include/erl_nif.h:336

  -- note that we have to keep ERL_NIF_API_FUNC_MACRO defined  
  -- Redundant declaration of deallocator functions as they are referred to by
  -- * __attribute__(malloc) of allocator functions and we cannot change
  -- * the declaration order in erl_nif_api_funcs.h due to Windows.  

end erl_nif_h;

pragma Style_Checks (On);
pragma Warnings (On, "-gnatwu");
